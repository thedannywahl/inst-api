#!/bin/bash

# LICENSE ######################################################################
# ##############################################################################
#
# Copyright 2017 Danny Wahl (danny@instructure.com)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# HELPER FUNCTIONS #############################################################
# ##############################################################################

logo() {
  echo '
           CCCCCCCCCCCC
      C     CCCCCCCCCC     C
     CCC     CCCCCCCC     CCC
    CCCCC       CC       CCCCC
   CCCCCC                CCCCCC
                CC
C         CC          CC         C
CCC                            CCC
CCCC                          CCCC
CCCCC   C                C   CCCCC
CCCCC   C                C   CCCCC
CCCC                          CCCC
CCC                            CCC
C         CC          CC         C
                CC
   CCCCCC                CCCCCC
    CCCCC       CC       CCCCC
     CCC     CCCCCCCC     CCC
      C     CCCCCCCCCC     C
           CCCCCCCCCCCC
  '
}

dependency() {
  declare -a dep=("$@")
  command -v ${dep[2]} > /dev/null 2>&1 || prompt ${dep[@]}
}

prompt() {
  declare -a dep=("$@")
  clear
  echo >&2 "canvas-data-cli requires ${dep[1]} (${dep[3]}) but it's not installed"
  echo >&2 "would you like to install it now?"
  select yn in "Yes" "No"; do
    case $yn in
      Yes ) install ${dep[@]}; dependency ${dep[@]}; break;;
      No ) manualinstall ${dep[@]}; exit;;
    esac
  done
}

install() {
  declare -a dep=("$@")
  clear
  echo >&2 "canvas-data-cli will attempt to install ${dep[1]} (${dep[3]})"
  hr
  if [ ${dep[3]} = "npm" ]; then
    command -v ${dep[3]} > /dev/null 2>&1 && npm install -g "${dep[1]}" || manualinstall ${dep[@]} ""
  elif [ ${dep[3]} = "pip" ]; then
    command -v ${dep[3]} > /dev/null 2>&1 && pip2 install "${dep[1]}" || manualinstall ${dep[@]} ""
  else
    manualinstall ${dep[@]} ""
  fi
  local status=$(echo $?)
  if [ "$status" -gt 0 ]; then
    manualinstall ${dep[@]} $status
  fi
  hr
  echo >&2 "${dep[1]} (${dep[3]}) successfully installed"
}

manualinstall() {
  declare -a dep=("$@")
  if [ ${#dep[@]} -gt 4 ]; then
    hr
    echo "canvas-data-cli was unable to install ${dep[1]} (${dep[3]})"
    if [ ${dep[3]} = "npm" ]; then
      echo >&2 "\`npm install -g ${dep[1]}\` failed"
    elif [ ${dep[3]} = "pip" ]; then
      echo >&2 "\`pip2 install ${dep[1]}\` failed"
    else
      echo >&2 "\`curl\` is a system package"
    fi
  fi
  if [ ${dep[3]} = "npm" ]; then
    echo >&2 "Try using \`npm install -g ${dep[1]}\` to manually install"
  elif [ ${dep[3]} = "pip" ]; then
    echo >&2 "Try using \`pip2 install ${dep[1]}\` to manually install"
  else
    echo >&2 "${dep[1]} must be installed using a system package manager"
  fi
  exit 127
}

hr() {
  local start=$'\e(0' end=$'\e(B' line='qqqqqqqqqqqqqqqq'
  local cols=${COLUMNS:-$(tput cols)}
  while ((${#line} < cols)); do line+="$line"; done
  echo >&2 ""
  printf '%s%s%s\n' "$start" "${line:0:cols}" "$end"
  echo >&2 ""
}

outputrenderer="| json | pygmentize -l json"
setrenderer() {
  local renderer="$1"
  case $renderer in
    "plain")
      outputrenderer="" ;;
    "color")
      outputrenderer="| json | pygmentize -l json" ;;
    *)
      echo >&2 "invalid argument \`$renderer\` for \`-r\`" && usage && exit 2 ;;
  esac
}

curlopts="--tlsv1.2 --retry 2 --retry-connrefused -s -S -g"

# HELP STUFF ###################################################################
# ##############################################################################

help() {
  usage
  exit;
}

verbosehelp() {
  curl $curlopts -X GET "https://raw.githubusercontent.com/thedannywahl/inst-api/master/cdata/README" | less
  exit;
}

usage() {
  echo -e 2>&1 "Usage: cdata [options] method\r\nHelp: cdata -h"
}

version() {
  logo
  echo >&2 "  canvas-data-cli version 0.3.2"
  exit
}

license() {
  curl $curlopts -X GET "https://www.apache.org/licenses/LICENSE-2.0.txt" | less
  exit
}

# HANDLE DEPENDENCIES ##########################################################
# Requires: jsontool (npm), pygmentize (pip), curl, and getopts                #
# ##############################################################################

# null | name | executable | repository
# `null` is a hacky shift to avoid string manipulation of
# multi-dimensional array when passed as a parameter
json=("" "json" "json" "npm")
pygments=("" "pygments" "pygmentize" "pip")
shellgetopts=("" "getopts" "getopts" "system")
curl=("" "curl" "curl" "system")
dependencies=(JSON=${json[@]} PYGMENTS=${pygments[@]} SHELLGETOPTS=${shellgetopts[@]} CURL=${curl[@]})
for dep in "${dependencies[@]}"
  do dependency ${dep[@]}
done

# PREF FILE ####################################################################
# ##############################################################################

canvas_domain=""
canvas_token=""
data_key=""
data_secret=""
readconfig() {
  if [ -f ~/.inst ]; then
    . ~/.inst
    if [ -z $data_key ]; then
      echo >&2 "unable to read key from config file \`~/.inst\`"
      echo >&2 "It must be manually added or repaired.  Format:"
      echo >&2 "data_key=\"<key>\""
      exit 2
    fi
    if [ -z $data_secret ]; then
      echo >&2 "unable to read secret from config file \`~/.inst\`"
      echo >&2 "It must be manually added or repaired.  Format:"
      echo >&2 "data_secret=\"<secret>\""
      exit 2;
    fi
  else
    clear
    echo >&2 "config file \`~/.inst\` not found"
    echo >&2 "would you like to create it now?"
    select yn in "Yes" "No"; do
      case $yn in
        Yes )
          setconfig; break ;;
        No )
          clear
          echo >&2 "canvas-data-cli requires a config file or use \`-k\` and \`-m\`"
          usage; exit 2 ;;
      esac
    done
  fi
}

setconfig() {
  clear
  echo -e "DO NOT create a config file on a shared system"
  echo >&2 "other system users will be able to authenticate using your"
  echo >&2 "saved credentials.  Instead use the \`-k\` and \`-m\` options"
  echo >&2 "Do you wish to proceed?"
  select ok in "Okay" "Cancel"; do
    case $ok in
      Okay)
        touch ~/.inst
        if [ $? = 0 ]; then
          setkey
          setsecret
          readconfig
        else
          clear
          echo >&2 "unable to create config file \`~/.inst\`"
          echo >&2 "please ensure that you have appropriate permissions"
          exit 2
        fi; break;;
      Cancel)
        clear
        echo >&2 "Enter your command again using the \`-k\` and \`-m\` options"
        usage;
        exit 0;;
    esac
  done
  clear
}

setkey() {
  clear
  echo >&2 "What is your Canvas Data key?"
  read cdatakey
  echo "data_key=\"$cdatakey\"" >> ~/.inst
}

setsecret() {
  clear
  echo >&2 "please input your Canvas Data Secret"
  read cdatasecret
  echo >&2 "data_secret=\"$cdatasecret\"" >> ~/.inst
}

# OUTPUT FILE ##################################################################
# ##############################################################################

outputpath=""
outputfile=""
setoutput() {
  if [ "$download" = true ]; then
    if [ ! -d ]; then
      clear
      echo >&2 "output directory does not exist."
      exit 1
    fi
    outputpath="> $1"
  else
    if [[ -d $1 ]]; then
      fn=$(date +%s)
      outputfile="${1}${fn}.json"
    fi
    if [ -z "$outputfile" ]; then
      outputfile=$1
    fi
    if [ -f $outputfile ]; then
      clear
      echo "\`$outputfile\` exists, overwrite it?"
      select ow in "Yes" "No"; do
        case $ow in
          Yes )
            outputpath="> $outputfile"; break ;;
          No )
            echo >&2 "will not overwrite file."
            exit 1
        esac
      done
    else
      outputpath="> $outputfile"
    fi
  fi
}

# QUERY PARAMS #################################################################
# ##############################################################################

params=""
query="?"
setquery() {
  if [[ $params == *"?"* ]]; then
    query="&"
  fi
}

after=""
setafter() {
  setquery
  params="${params}${query}after=$1"
}

limit=""
setlimit() {
  setquery
  params="${params}${query}limit=$1"
}

# AUTHENTICATION ###############################################################
# ##############################################################################
getsignature() {
  method="GET"
  host="portal.inshosteddata.com"
  contenttype="application/json"
  contentMD5=""
  hp=$params
  if [[ hp == ?* ]] || [[ hp == \&* ]]; then
    hp="${hp:1}"
  fi
  nl="\n"
  data_headers=$method$nl$host$nl$contenttype$nl$contentMD5$nl$prefix$path$nl$hp$nl$date$nl$data_secret
  data_signature=$(echo -ne $data_headers | openssl dgst -sha256 -hmac $data_secret -binary | base64)
}

# PARSE OPTS ###################################################################
# ##############################################################################

if [ $# -eq 0 ] && [ ! -f ~/.inst ]; then
  readconfig
  help
elif [ $# -eq 0 ] && [ -f ~/.inst ]; then
  help
else
  while [ $# -gt 0 ] && [ "$1" != "--" ]; do
    while getopts ":hlvcdsq:a:r:k:m:o:" opt; do
      case $opt in
        h)
          verbosehelp ;;
        l)
          license ;;
        v)
          version ;;
        c)
          setconfig ;;
        d)
          download=true ;;
        s)
          sample=true ;;
        q)
          setlimit $OPTARG ;;
        a)
          setafter $OPTARG ;;
        r)
          setrenderer $OPTARG ;;
        k)
          data_key="$OPTARG" ;;
        m)
          data_secret="$OPTARG" ;;
        o)
          setoutput $OPTARG;;
        \?)
          echo >&2 "invalid option: \`-$OPTARG\`" && usage && exit 2 ;;
        :)
          echo >&2 "missing argument for \`-$OPTARG\`" && usage && exit 2 ;;
      esac
    done
    shift $((OPTIND-1))
    if [ $# -gt 0 ] && ! [[ "$1" =~ ^- ]]; then
      path="$1"
      shift
      break
    else
      echo "No API method provided!"
      usage
      exit 2
    fi
  done
  if [ "$1" == "--" ]; then
    shift
    path=("${path[@]}" "$@")
  fi
fi

# BUILD COMMAND ################################################################
# ##############################################################################

if [ -z "$data_key" ] && [ -z "$data_secret" ]; then
  readconfig
elif [ -z "$data_key" ] || [ -z "$data_secret" ]; then
  echo >&2 "Both \`-k\` and \`-m\` are requied when not using a config file"
  usage
  exit 2
fi

if [ "$download" = true ] && [ -n "$outputpath" ]; then
  echo "warning: Downloading dumps is still in development."
  outputrenderer=""
elif [ "$download" = true ] && [ -z "$outputpath" ]; then
  echo >&2 "Both \`-d\` and \`-o\` are requied when downloading dumps"
  usage
  exit 2
fi

if [ -n "$outputpath" ] && [ -n "$outputrenderer" ]; then
  outputrenderer=""
fi

prefix="/api/"
if [ "${path:0:6}" != "schema" ]; then
  prefix="${prefix}account/self/"
  date=$(date -u +%a,\ %d\ %b\ %Y\ %H:%M:%S\ GMT)
  getsignature
  curlopts="$curlopts -H 'Authorization: HMACAuth $data_key:$data_signature'"
  curlopts="$curlopts -H 'Date: $date'"
  curlopts="$curlopts -H 'Content-Type: application/json'"
else
  limit=""
  after=""
fi

command="curl $curlopts \"https://portal.inshosteddata.com$prefix$path$params\" $outputrenderer $outputpath"
if [ "$sample" = true ]; then
  echo "$command"
elif [ "$download" = true ]; then
  dumps=$(eval curl $curlopts \"https://portal.inshosteddata.com$prefix$path$params\")
  # declare -A tables
  # Python JSON to array values
  # for table in ${!tables[@]}; do
  #  t=$(echo $table | python -c "import sys, json; print json.load(sys.stdin)['table']")
    u=$(echo $dumps | python -c "import sys, json; print json.load(sys.stdin)['history'][0]['files'][0]['url']")
    f=$(echo $dumps | python -c "import sys, json; print json.load(sys.stdin)['history'][0]['files'][0]['filename']")
    #id=$(echo $dumps | python -c "import sys, json; print json.load(sys.stdin)['history'][0]['sequence']")
    # TODO: sub params for $curlopts
    $(eval curl --tlsv1.2 --retry 2 --retry-connrefused -s -S -g \"$u\" $outputpath$f)
  #done
else
  eval $command
fi
