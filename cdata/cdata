#!/bin/bash

# LICENSE ######################################################################
# ##############################################################################
#
# Copyright 2017 Danny Wahl (danny@instructure.com)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# HELPER FUNCTIONS #############################################################
# ##############################################################################
cmd=${0##*/}
curlopts=$(insthelp curlopts)
ver="1.0.0"
outputrenderer=$(insthelp setrenderer)
$(insthelp checkdeps) > /dev/null 2>&1

# PREF FILE ####################################################################
# ##############################################################################
if [ -f ~/.inst ]; then
  . ~/.inst
  if [ -z $data_key ] || [ -z $data_secret ]; then
   $(insthelp setconfig $cmd)
   exit
  fi
else
 $(insthelp setconfig $cmd)
 exit
fi

# QUERY PARAMS #################################################################
# ##############################################################################

params=""
query=$(insthelp setquery)

after=""
setafter() {
  query=$(insthelp setquery $params)
  params="${params}${query}after=$1"
}

limit=""
setlimit() {
  query=$(insthelp setquery $params)
  params="${params}${query}limit=$1"
}

# AUTHENTICATION ###############################################################
# ##############################################################################
getsignature() {
  method="GET"
  host="api.inshosteddata.com"
  contenttype="application/json"
  contentMD5=""
  hp=$params
  if [[ hp == ?* ]] || [[ hp == \&* ]]; then
    hp="${hp:1}"
  fi
  nl="\n"
  data_headers=$method$nl$host$nl$contenttype$nl$contentMD5$nl$prefix$path$nl$hp$nl$date$nl$data_secret
  data_signature=$(echo -ne $data_headers | openssl dgst -sha256 -hmac $data_secret -binary | base64)
}

# PARSE OPTS ###################################################################
# ##############################################################################

if [ $# -eq 0 ] && [ ! -f ~/.inst ]; then
  $(insthelp readconfig $cmd)
  $(insthelp help $cmd)
  exit 2
elif [ $# -eq 0 ] && [ -f ~/.inst ]; then
  $(insthelp help $cmd)
  exit 2
else
  while [ $# -gt 0 ] && [ "$1" != "--" ]; do
    while getopts ":hlvcdsq:a:r:k:m:o:" opt; do
      case $opt in
        h)
          $(insthelp verbosehelp $cmd)
          exit ;;
        l)
          $(insthelp license)
          exit ;;
        v)
          $(insthelp version $cmd $ver)
          exit ;;
        c)
          $(insthelp setconfig $cmd)
          exit ;;
        d)
          download=true ;;
        s)
          sample=true ;;
        q)
          setlimit $OPTARG ;;
        a)
          setafter $OPTARG ;;
        r)
          outputrenderer=$(insthelp setrenderer $OPTARG) ;;
        k)
          data_key="$OPTARG" ;;
        m)
          data_secret="$OPTARG" ;;
        o)
          outputpath=$(insthelp setoutput $download $OPTARG)
          if [ "$outputpath" = "ERR" ]; then exit 1; fi;;
        \?)
          printf >&2 "Invalid option: \`-$OPTARG\`\r\n"
          $(insthelp help $cmd)
          exit 2 ;;
        :)
          printf >&2 "Missing argument for \`-$OPTARG\`\r\n"
          $(insthelp help $cmd)
          exit 2 ;;
      esac
    done
    shift $((OPTIND-1))
    if [ $# -gt 0 ] && ! [[ "$1" =~ ^- ]]; then
      path="$1"
      shift
      break
    else
      printf >&2 "No API method provided\r\n"
      $(insthelp help $cmd)
      exit 2
    fi
  done
  if [ "$1" == "--" ]; then
    shift
    path=("${path[@]}" "$@")
  fi
fi

# BUILD COMMAND ################################################################
# ##############################################################################

if [ -z "$data_key" ] && [ -z "$data_secret" ]; then
  $(insthelp readconfig $cmd)
elif [ -z "$data_key" ] || [ -z "$data_secret" ]; then
  printf >&2 "Both \`-k\` and \`-m\` are requied when not using a config file\r\n"
  $(insthelp help $cmd)
  exit 2
fi

if [ "$download" = true ] && [ -n "$outputpath" ]; then
  outputrenderer=""
elif [ "$download" = true ] && [ -z "$outputpath" ]; then
  printf >&2 "Both \`-d\` and \`-o\` are requied when downloading dumps\r\n"
  $(insthelp help $cmd)
  exit 2
fi

if [ -n "$outputpath" ] && [ -n "$outputrenderer" ]; then
  outputrenderer=""
fi

prefix="/api/"
if [ "${path:0:6}" != "schema" ]; then
  prefix="${prefix}account/self/"
  date=$(date -u +%a,\ %d\ %b\ %Y\ %H:%M:%S\ GMT)
  getsignature
  curlopts="$curlopts -H 'Authorization: HMACAuth $data_key:$data_signature'"
  curlopts="$curlopts -H 'Date: $date'"
  curlopts="$curlopts -H 'Content-Type: application/json'"
else
  limit=""
  after=""
fi

command="curl $curlopts \"https://api.inshosteddata.com$prefix$path$params\" $outputrenderer $outputpath"
if [ "$sample" = true ]; then
  printf >&2 "$command\r\n"
elif [ "$download" = true ]; then
  dumps=$(eval curl $curlopts \"https://api.inshosteddata.com$prefix$path$params\")
  fpath=${outputpath:2}
  printf >&2 "Saving files to $fpath:\r\n"
  for row in $(echo "${dumps}" | jq -rc '.artifactsByTable[].files[0]'); do
    u=$(echo ${row} | jq -r '.url')
    f=$(echo ${row} | jq -r '.filename')
    printf >&2 "  ==> $f "
    $(eval curl $curlopts \"$u\" $outputpath$f)
    if [ -f "$fpath$f" ]; then
      printf $(tput setaf 2)'\xe2\x9c\x94\r\n'$(tput sgr0)
    else
      printf $(tput setaf 1)'\xE2\x9c\x98\r\n'$(tput sgr0)
    fi
  done
else
  eval $command
fi
