#!/bin/bash

# LICENSE ######################################################################
# ##############################################################################
# Copyright 2017 Danny Wahl (danny@instructure.com)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# HELPER FUNCTIONS #############################################################
# ##############################################################################
ver="1.0.0"

hr() {
  local start=$'\e(0' end=$'\e(B' line='qqqqqqqqqqqqqqqq'
  local cols=${COLUMNS:-$(tput cols)}
  while ((${#line} < cols)); do line+="$line"; done
  printf >&2 ""
  printf '%s%s%s\r\n' "$start" "${line:0:cols}" "$end" >&2
  printf >&2 ""
}

setrenderer() {
  local renderer="$1"
  local default="| jq ."
  case $renderer in
    plain|p)
      echo "" ;;

    color|c)
      echo "$default" ;;
    "")
      echo "$default" ;;
    *)
      printf >&2 "Warning: invalid argument \`$renderer\` for \`-r\`, "
      printf >&2 "using default renderer \`$default\`.\r\n"
      echo "$default"
      ;;
  esac
  exit
}

curlopts="--retry 2 --retry-connrefused -s -S -g"
curlopts() {
  tls=$(openssl ciphers -v | sed -ne '/TLSv1/p')
  if [[ $tls == *"TLSv1.3"* ]]; then
    curlopts="$curlopts --tlsv1.3"
  else
    curlopts="$curlopts --tlsv1.2"
  fi
}
curlopts

logo() {
  local cmd=$1
  RED=$(tput setaf 1)
  YELLOW=$(tput setaf 3)
  LIME_YELLOW=$(tput setaf 190)
  GREEN=$(tput setaf 2)
  BLUE=$(tput setaf 4)
  CYAN=$(tput setaf 6)
  NORMAL=$(tput sgr0)
  case $cmd in
    canvas|catalog|cdata|commons)
      printf >&2 ${RED}'
             CCCCCCCCCCCC
        C     CCCCCCCCCC     C
       CCC     CCCCCCCC     CCC
      CCCCC       CC       CCCCC
     CCCCCC                CCCCCC
                  CC
  C         CC          CC         C
  CCC                            CCC
  CCCC                          CCCC
  CCCCC   C                C   CCCCC
  CCCCC   C                C   CCCCC
  CCCC                          CCCC
  CCC                            CCC
  C         CC          CC         C
                  CC
     CCCCCC                CCCCCC
      CCCCC       CC       CCCCC
       CCC     CCCCCCCC     CCC
        C     CCCCCCCCCC     C
             CCCCCCCCCCCC

    '${NORMAL} ;;
    bridge)
      printf >&2 ${BLUE}'
      BBBBBBBBBBBBBBBBBBBBBBBBBB
      BBBBBBBBBBBBBBBBBBBBBBB BB
      BBBBBBBBBBBBBBBBBBBBBB  BB
      BBBBBBBBBBBBBBBBBBBBB   BB
      BBBBBBBBBBBBBBBBBBBB    BB
      BBBBBBBBBBBBBBBBB B     BB
      BBBBBBBBBBBBBBBB  B     BB
      BBBBBBBBBBBBBB    B     BB
      BBBBBBBBBB  B     B     BB
      BB    B     B     B     BB
      BBBBBBBBBBBBBBBBBBBBBBBBBB

    '${NORMAL} ;;
    studio)
    printf >&2 ${GREEN}'
  SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
  S                              S
  S              S               S
  S              SSS             S
  S              S               S
  S                              S
  SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
  S                              S
  SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
       S     S        S     S
  SSS  S     S        S     S  SSS
  SSSSSS     S        S     SSSSSS
  SSS        S        S        SSS
           SSSSS    SSSSS
           SSSSS    SSSSS
           SSSSS    SSSSS

    '${NORMAL} ;;
    insthelp)
      printf >&2 "
                   ${YELLOW}I
                IIIIIII
            ${LIME_YELLOW}I${YELLOW}IIIIIIIIIIIII${RED}I
        ${LIME_YELLOW}IIIIIIII${YELLOW}IIIIIII${RED}IIIIIII
     ${LIME_YELLOW}IIIIIIIIIIIIII${YELLOW}I${RED}IIIIIIIIIIIIII
        ${LIME_YELLOW}IIIIIIII       ${RED}IIIIIII
            ${LIME_YELLOW}I             ${RED}I


                   ${BLUE}I
                IIIIIII
            IIIIIIIIIIIIIII
        IIIIIIIIIIIIIIIIIIIIII
     IIIIIIIIIIIIIIIIIIIIIIIIIIIII
        IIIIIIIIIIIIIIIIIIIIII
            IIIIIIIIIIIIIII
                IIIIIII
                   I

    ${NORMAL}" ;;
  esac
}

sethttp() {
  local http="$1"
  local default="GET"
  case $http in
    get|GET|"")
      httpmethod="GET" ;;
    post|POST)
      httpmethod="POST" ;;
    put|PUT)
      httpmethod="PUT" ;;
    delete|DELETE)
      httpmethod="DELETE" ;;
    *)
      printf >&2 "invalid argument \`$http\` for \`-X\`,"
      printf >&2 " using default method \`$default\`.\r\n"
      httpmethod="$default" ;;
    esac
    echo "$httpmethod"
}

# PREF FILE ####################################################################
################################################################################
checkdotfile() {
  local dotfile=$1
  local dotfileexists=$2
  if [ -f $dotfile ]; then
    dotfileexists=true
  fi
  echo $dotfileexists
}

checkvault() {
  local vault=$1
  local vaults=$2
  local vaultexists=$3
  if grep -q $vault <<< $vaults; then
    vaultexists=true
  else
    vaultexists=false
  fi
  echo $vaultexists
}

checkneedsmigrate() {
  local vaults=($(vaulted ls))
  local vault="inst-api"
  local vaultexists=false
  local dotfile=~/.inst
  local dotfileexists=false
  dotfileexists=$(checkdotfile $dotfile $dotfileexists)
  vaultexists=$(checkvault $vault $vaults $vaultexists)
  if $dotfileexists && $vaultexists; then
    clear >&2
    printf >&2 "inst-api has previously been successfully migrated to vaulted.\r\n"
    cleanup
  elif [ $dotfileexists = false ] && [ $vaultexists = false ]; then
    createvault
  elif $dotfileexists && [ $vaultexists = false ]; then
    migratevault
    cleanup
  fi
}

createvault() {
  clear >&2
  printf >&2 "Welcome to inst-api!"
  printf >&2 "inst-api stores credentials securely using vaulted.\r\n\r\n"
  printf >&2 "Save your vault (q) and choose a password to secure your keys.\r\n"
  printf >&2 "inst-api will walk you through adding keys to your vault.\r\n"
  hr
  local status=$(vaulted add inst-api >&2)
  if [[ $status -ne 0 ]]; then
    printf >&2 "Error creating vault. Try again or manually run:\r\n"
    printf >&2 "\`vaulted add inst-api\`\r\n"
    exit 1
  fi
}

migratevault() {
  clear >&2
  printf >&2 "inst-api will attempt to migrate to a new vault using vaulted.\r\n"
  printf >&2 "You will be prompted to create a password for your vault.\r\n"
  hr
  local json=""
  while IFS= read -r line
  do
    line=$(echo $line | sed 's/=/":/')
    line="\"${line}"
    json="${json}${line},"
  done < "$dotfile"
  json="{\"vars\":{${json%?}}}"
  local status=$(vaulted load inst-api <<< "$json" >&2)
  if [[ $status -ne 0 ]]; then
    hr
    printf >&2 "An error occured while attempting to migrate to vaulted.\r\n"
    printf >&2 "Try again or manually run:\r\n"
    printf >&2 "vaulted load inst-api <<< \"$json\""
    exit 1
  else
    clear >&2
  fi
}

editvault() {
  $(vaulted edit inst-api >&2)
}

cleanup() {
  printf >&2 "Warning: legacy file ~/.inst found. For security purposes, it should be removed.\r\n"
  printf >&2 "Do you want to remove it now?\r\n"
  select ow in "Yes" "No"; do
    case $ow in
      Yes )
        local status=$(rm ~/.inst)
        if [[ $status -ne 0 ]]; then
          printf >&2 "Error removing config file. Try again or manually run:\r\n"
          printf >&2 "\`rm ~/.inst\`\r\n"
        else
          clear >&2
        fi
        break ;;
      No )
        clear >&2
        printf >&2 "Warning: legacy file ~/.inst has not been removed.\r\n"
        printf >&2 "For security purposes, try again or manually run:\r\n"
        printf >&2 "\`rm ~/.inst\`\r\n\r\n"
        break ;;
    esac
  done
}

readconfig() {
  checkneedsmigrate
  local cmd=$1
  local -a keys
  local cfg=$(vaulted env --format='{{ json .Set }}' inst-api)
  case $cmd in
    bridge)
      keys[0]=$(echo $cfg | jq -r .bridge_domain)
      keys[1]=$(echo $cfg | jq -r .bridge_token) ;;
    canvas)
      keys[0]=$(echo $cfg | jq -r .canvas_domain)
      keys[1]=$(echo $cfg | jq -r .canvas_token) ;;
    catalog)
      keys[0]=$(echo $cfg | jq -r .catalog_domain)
      keys[1]=$(echo $cfg | jq -r .catalog_token) ;;
    cdata)
      keys[0]=$(echo $cfg | jq -r .data_key)
      keys[1]=$(echo $cfg | jq -r .data_secret) ;;
    commons)
      keys[0]=$(echo $cfg | jq -r .canvas_domain)
      keys[1]=$(echo $cfg | jq -r .canvas_token) ;;
    studio)
      keys[0]=$(echo $cfg | jq -r .studio_domain)
      keys[1]=$(echo $cfg | jq -r .studio_email)
      keys[2]=$(echo $cfg | jq -r .studio_password) ;;
  esac
  echo "${keys[*]}"
}

setconfig() {
  checkneedsmigrate
  local cmd=$1
  case $cmd in
    bridge)
       bridge_setdomain; bridge_settoken;;
    canvas)
       canvas_setdomain; canvas_settoken;;
    catalog)
       catalog_setdomain; catalog_settoken;;
    cdata)
       cdata_setkey; cdata_setsecret;;
    commons)
       commons_setdomain; commons_settoken;;
    studio)
       studio_setdomain; studio_setemail; studio_setpassword;;
  esac
}

tmpdumpvault() {
  local tmp=$(vaulted dump inst-api);
  echo $tmp;
}

bridge_setdomain() {
  local json=$(tmpdumpvault)
  clear >&2
  printf >&2 "What is your Bridge subdomain?\r\n"
  printf >&2 "https://<subdomain>.bridgeapp.com"
  read bridgedomain
  json=$(echo $json | jq --arg "bridge_domain" "$bridgedomain" '. * {"vars": {"bridge_domain": $bridge_domain}}')
  local status=$(vaulted load inst-api <<< "$json" >&2)
  if [[ $status -ne 0 ]]; then
    hr
    printf >&2 "An error occured while attempting to add \`bridge_domain\` to vaulted.\r\n"
    printf >&2 "Try again or manually run:\r\n"
    printf >&2 "vaulted load inst-api <<< \"$json\""
    exit 1
  fi
}

bridge_settoken() {
  local json=$(tmpdumpvault)
  clear >&2
  echo >&2 "What is your Bridge API token?\r\n"
  read bridgetoken
  json=$(echo $json | jq --arg "bridge_token" "$bridgetoken" '. * {"vars": {"bridge_token": $bridge_token}}')
  local status=$(vaulted load inst-api <<< "$json" >&2)
  if [[ $status -ne 0 ]]; then
    hr
    printf >&2 "An error occured while attempting to add \`bridge_token\` to vaulted.\r\n"
    printf >&2 "Try again or manually run:\r\n"
    printf >&2 "vaulted load inst-api <<< \"$json\""
    exit 1
  fi
}

canvas_setdomain() {
  local json=$(tmpdumpvault)
  clear >&2
  printf >&2 "What is your Canvas subdomain?\r\n"
  printf >&2 "https://<subdomain>.instructure.com\r\n"
  read canvasdomain
  json=$(echo $json | jq --arg "canvas_domain" "$canvasdomain" '. * {"vars": {"canvas_domain": $canvas_domain}}')
  local status=$(vaulted load inst-api <<< "$json" >&2)
  if [[ $status -ne 0 ]]; then
    hr
    printf >&2 "An error occured while attempting to add \`canvas_domain\` to vaulted.\r\n"
    printf >&2 "Please try again or you can manually run:\r\n\r\n"
    printf >&2 "vaulted load inst-api <<< \"$json\""
    exit 1
  fi
}

canvas_settoken() {
  local json=$(tmpdumpvault)
  clear >&2
  printf >&2 "What is your Canvas API token?\r\n"
  read canvastoken
  json=$(echo $json | jq --arg "canvas_token" "$canvastoken" '. * {"vars": {"canvas_token": $canvas_token}}')
  local status=$(vaulted load inst-api <<< "$json" >&2)
  if [[ $status -ne 0 ]]; then
    hr
    printf >&2 "An error occured while attempting to add \`canvas_token\` to vaulted.\r\n"
    printf >&2 "Please try again or you can manually run:\r\n\r\n"
    printf >&2 "vaulted load inst-api <<< \"$json\""
    exit 1
  fi
}

catalog_setdomain() {
  local json=$(tmpdumpvault)
  clear >&2
  printf >&2 "What is your Canvas Catalog subdomain?\r\n"
  echo >&2 "https://<subdomain>.catalog.instructure.com\r\n"
  read catalogdomain
  json=$(echo $json | jq --arg "catalog_domain" "$catalogdomain" '. * {"vars": {"catalog_domain": $catalog_domain}}')
  local status=$(vaulted load inst-api <<< "$json" >&2)
  if [[ $status -ne 0 ]]; then
    hr
    printf >&2 "An error occured while attempting to add \`catalog_domain\` to vaulted.\r\n"
    printf >&2 "Please try again or you can manually run:\r\n\r\n"
    printf >&2 "vaulted load inst-api <<< \"$json\""
    exit 1
  fi
}

catalog_settoken() {
  local json=$(tmpdumpvault)
  clear >&2
  printf >&2 "What is your Canvas API token?\r\n"
  read catalogtoken
  json=$(echo $json | jq --arg "catalog_token" "$catalogtoken" '. * {"vars": {"catalog_token": $catalog_token}}')
  local status=$(vaulted load inst-api <<< "$json" >&2)
  if [[ $status -ne 0 ]]; then
    hr
    printf >&2 "An error occured while attempting to add \`catalog_token\` to vaulted.\r\n"
    printf >&2 "Please try again or you can manually run:\r\n\r\n"
    printf >&2 "vaulted load inst-api <<< \"$json\""
    exit 1
  fi
}

cdata_setkey() {
  local json=$(tmpdumpvault)
  clear >&2
  printf >&2 "What is your Canvas Data key?\r\n"
  read cdatakey
  json=$(echo $json | jq --arg "data_key" "$cdatakey" '. * {"vars": {"data_key": $data_key}}')
  local status=$(vaulted load inst-api <<< "$json" >&2)
  if [[ $status -ne 0 ]]; then
    hr
    printf >&2 "An error occured while attempting to add \`data_key\` to vaulted.\r\n"
    printf >&2 "Please try again or you can manually run:\r\n\r\n"
    printf >&2 "vaulted load inst-api <<< \"$json\""
    exit 1
  fi
}

cdata_setsecret() {
  local json=$(tmpdumpvault)
  clear >&2
  printf >&2 "What is your Canvas Data secret?\r\n"
  read cdatasecret
  json=$(echo $json | jq --arg "data_secret" "$cdatasecret" '. * {"vars": {"data_secret": $data_secret}}')
  local status=$(vaulted load inst-api <<< "$json" >&2)
  if [[ $status -ne 0 ]]; then
    hr
    printf >&2 "An error occured while attempting to add \`data_secret\` to vaulted.\r\n"
    printf >&2 "Please try again or you can manually run:\r\n\r\n"
    printf >&2 "vaulted load inst-api <<< \"$json\""
    exit 1
  fi
}

commons_setdomain() {
  local json=$(tmpdumpvault)
  clear >&2
  printf >&2 "What is your Canvas subdomain?\r\n"
  printf >&2 "https://<subdomain>.instructure.com\r\n"
  read canvasdomain
  json=$(echo $json | jq --arg "canvas_domain" "$canvasdomain" '. * {"vars": {"canvas_domain": $canvas_domain}}')
  local status=$(vaulted load inst-api <<< "$json" >&2)
  if [[ $status -ne 0 ]]; then
    hr
    printf >&2 "An error occured while attempting to add \`canvas_domain\` to vaulted.\r\n"
    printf >&2 "Please try again or you can manually run:\r\n\r\n"
    printf >&2 "vaulted load inst-api <<< \"$json\""
    exit 1
  fi
}

commons_settoken() {
  local json=$(tmpdumpvault)
  clear >&2
  printf >&2 "What is your Canvas API token?\r\n"
  read canvastoken
  json=$(echo $json | jq --arg "canvas_token" "$canvastoken" '. * {"vars": {"canvas_token": $canvas_token}}')
  local status=$(vaulted load inst-api <<< "$json" >&2)
  if [[ $status -ne 0 ]]; then
    hr
    printf >&2 "An error occured while attempting to add \`canvas_token\` to vaulted.\r\n"
    printf >&2 "Please try again or you can manually run:\r\n\r\n"
    printf >&2 "vaulted load inst-api <<< \"$json\""
    exit 1
  fi
}

studio_setdomain() {
  local json=$(tmpdumpvault)
  clear >&2
  printf >&2 "What is your Studio subdomain?\r\n"
  printf >&2 "https://<subdomain>.instructuremedia.com\r\n"
  read studiodomain
  json=$(echo $json | jq --arg "studio_domain" "$studiodomain" '. * {"vars": {"studio_domain": $studio_domain}}')
  local status=$(vaulted load inst-api <<< "$json" >&2)
  if [[ $status -ne 0 ]]; then
    hr
    printf >&2 "An error occured while attempting to add \`studio_domain\` to vaulted.\r\n"
    printf >&2 "Please try again or you can manually run:\r\n\r\n"
    printf >&2 "vaulted load inst-api <<< \"$json\""
    exit 1
  fi
}

studio_setemail() {
  local json=$(tmpdumpvault)
  clear >&2
  printf >&2 "What is your Studio login email address?\r\n"
  read studioemail
  json=$(echo $json | jq --arg "studio_email" "$studioemail" '. * {"vars": {"studio_email": $studio_email}}')
  local status=$(vaulted load inst-api <<< "$json" >&2)
  if [[ $status -ne 0 ]]; then
    hr
    printf >&2 "An error occured while attempting to add \`studio_email\` to vaulted.\r\n"
    printf >&2 "Please try again or you can manually run:\r\n\r\n"
    printf >&2 "vaulted load inst-api <<< \"$json\""
    exit 1
  fi
}

studio_setpassword() {
  local json=$(tmpdumpvault)
  clear >&2
  printf >&2 "What is your Studio login password?\r\n"
  read studiopassword
  json=$(echo $json | jq --arg "studio_password" "$studiopassword" '. * {"vars": {"studio_password": $studio_password}}')
  local status=$(vaulted load inst-api <<< "$json" >&2)
  if [[ $status -ne 0 ]]; then
    hr
    printf >&2 "An error occured while attempting to add \`studio_password\` to vaulted.\r\n"
    printf >&2 "Please try again or you can manually run:\r\n\r\n"
    printf >&2 "vaulted load inst-api <<< \"$json\""
    exit 1
  fi
}

# HELP STUFF ###################################################################
# ##############################################################################
metahelp() {
  local cmd=$1
  local ver=$2
  version $cmd $ver
}

help() {
  local cmd=$1
  usage $cmd
  exit
}

verbosehelp() {
  local cmd=$1
  curl $curlopts "https://raw.githubusercontent.com/thedannywahl/inst-api/master/$cmd/README" | less >&2
  exit
}

usage() {
  local cmd=$1
  printf >&2 "Usage: $cmd [options] method\r\nHelp:  $cmd -h\r\n"
}

version() {
  local cmd=$1
  local ver=$2
  logo $cmd
  printf >&2 "      $cmd version $ver\r\n\r\n"
  exit
}

license() {
  curl $curlopts "https://www.apache.org/licenses/LICENSE-2.0.txt" | less >&2
  exit
}

# DEPENDENCIES #################################################################
# Requires: jq, vaulted, curl, sed, and getopts                                #
# ##############################################################################
dependency() {
  declare -a dep=("$@")
  command -v ${dep[2]} > /dev/null 2>&1 || prompt ${dep[@]}
}

prompt() {
  declare -a dep=("$@")
  clear >&2
  printf >&2 "inst-api requires ${dep[1]} (${dep[3]}) but it's not installed\r\n"
  printf >&2 "would you like to install it now?"
  select yn in "Yes" "No"; do
    case $yn in
      Yes ) install ${dep[@]}; dependency ${dep[@]}; break;;
      No ) manualinstall ${dep[@]}; exit;;
    esac
  done
}

install() {
  declare -a dep=("$@")
  clear >&2
  printf >&2 "inst-api will attempt to install ${dep[1]} (${dep[3]})\r\n"
  hr
  if [ ${dep[3]} = "brew" ]; then
    command -v ${dep[3]} > /dev/null 2>&1 && brew install "${dep[1]}" >&2 || manualinstall ${dep[@]} ""
  else
    manualinstall ${dep[@]} ""
  fi
  local status=$(printf $?)
  if [ "$status" -gt 0 ]; then
    manualinstall ${dep[@]} $status
  fi
  hr
  printf >&2 "${dep[1]} (${dep[3]}) successfully installed\r\n"
  clear >&2
}

manualinstall() {
  declare -a dep=("$@")
  if [ ${#dep[@]} -gt 4 ]; then
    hr
    printf "inst-api was unable to install ${dep[1]} (${dep[3]})"
    if [ ${dep[3]} = "brew" ]; then
      printf >&2 "\`${dep[3]} install ${dep[1]}\` failed\r\n"
    else
      printf >&2 "\`${dep[1]}\` is a system package\r\n"
    fi
  fi
  if [ ${dep[3]} = "brew" ]; then
    printf >&2 "Try using \`${dep[3]} install ${dep[1]}\` to manually install\r\n"
  else
    printf >&2 "${dep[1]} must be installed using a system package manager\r\n"
  fi
  exit 127
}

checkdeps() {
  jq=("" "jq" "jq" "brew")
  vaulted=("" "vaulted" "vaulted" "brew")
  shellgetopts=("" "getopts" "getopts" "system")
  curl=("" "curl" "curl" "system")
  sed=("" "sed" "sed" "systtem")
  dependencies=(JQ=${jq[@]} VAULTED=${vaulted[@]} SHELLGETOPTS=${shellgetopts[@]} CURL=${curl[@]} SED=${sed[@]})
  for dep in "${dependencies[@]}"
    do dependency ${dep[@]}
  done
}

# OUTPUT FILE ##################################################################
# ##############################################################################
setoutput() {
  local file=$1
  local call=$2
  local download=$3
  local err="ERR"
  if [ "$download" = true ]; then
    if [ ! -d "$file" ]; then
      printf >&2 "Output directory does not exist.\r\n"
      echo "$err"
      exit 1
    fi
    outputpath="> $file"
    echo "$outputpath"
  else
    if [ -d "$file" ]; then
      d=$(date +%s)
      fn=$(echo ${call//\//_})
      outputfile="${file}${fn}_${d}.json"
    fi
    if [ -z "$outputfile" ]; then
      outputfile=$file
    fi
    if [ -f $outputfile ]; then
      clear
      printf >&2 "\`$outputfile\` exists, overwrite it?\r\n"
      select ow in "Yes" "No"; do
        case $ow in
          Yes )
            outputpath="> $outputfile"; echo "$outputpath"; break ;;
          No )
            printf >&2 "will not overwrite file.\r\n"
            echo "$err"
            exit 1
        esac
      done
    else
      outputpath="> $outputfile"
      echo "$outputpath"
    fi
  fi
}

# QUERY PARAMS #################################################################
# ##############################################################################
setquery() {
  local params=$1
  query="?"
  if [[ $params == *"?"* ]]; then
    query="&"
  fi
  echo "$query"
}

# PARSE COMMAND ################################################################
# ##############################################################################
fnc=$1
case $fnc in
  help)
    help $2 ;;
  verbosehelp)
    verbosehelp $2 ;;
  version)
    version $2 $3 ;;
  license)
    license ;;
  checkdeps)
    checkdeps ;;
  curlopts)
    echo "$curlopts" ;;
  readconfig)
    readconfig $2 ;;
  setconfig)
    setconfig $2 ;;
  setrenderer)
    setrenderer $2 ;;
  setoutput)
    setoutput $2 $3 $4 ;;
  setquery)
    setquery $2 ;;
  sethttp)
    sethttp $2 ;;
  vault)
    editvault ;;
  "")
    metahelp ${0##*/} $ver;;
esac
