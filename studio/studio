#!/bin/bash

# LICENSE ######################################################################
# ##############################################################################
#
# Copyright 2017 Danny Wahl (danny@instructure.com)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# HELPER FUNCTIONS #############################################################
# ##############################################################################
cmd=${0##*/}
ver="1.0.0"
$(insthelp checkdeps) > /dev/null 2>&1
curlopts=$(insthelp curlopts)
outputrenderer=$(insthelp setrenderer)
httpmethod=$(insthelp sethttp)

# PREF FILE ####################################################################
# ##############################################################################
if [ -f ~/.inst ]; then
  . ~/.inst
  if [ -z $studio_domain ] || [ -z $studio_email ] || [ -z $studio_password ]; then
   $(insthelp setconfig $cmd)
   exit
  fi
else
 $(insthelp setconfig $cmd)
 exit
fi

# PARSE OPTS ###################################################################
# ##############################################################################
formopts=""
if [ $# -eq 0 ] && [ ! -f ~/.inst ]; then
  $(insthelp readconfig $cmd)
  $(insthelp help $cmd)
  exit 2
elif [ $# -eq 0 ] && [ -f ~/.inst ]; then
  $(insthelp help $cmd)
  exit 2
else
  while [ $# -gt 0 ] && [ "$1" != "--" ]; do
    while getopts ":hlvcsr:x:X:e:p:d:o:f:F:" opt; do
      case $opt in
        h)
          $(insthelp verbosehelp $cmd)
          exit ;;
        l)
          $(insthelp license)
          exit ;;
        v)
          $(insthelp version $cmd $ver)
          exit ;;
        c)
          $(insthelp setconfig $cmd)
          exit ;;
        s)
          sample=true ;;
        r)
          outputrenderer=$(insthelp setrenderer $OPTARG) ;;
        X|x)
          $(insthelp sethttp $OPTARG) ;;
        d)
          studio_domain="$OPTARG" ;;
        e)
          studio_email="$OPTARG" ;;
        p)
          studio_password="$OPTARG" ;;
        o)
          outputpath=$(insthelp setoutput $OPTARG ${BASH_ARGV[0]})
          if [ "$outputpath" = "ERR" ]; then exit 1; fi ;;
        F|f)
          formopts="$formopts -F $OPTARG" ;;
        \?)
          printf >&2 "Invalid option: \`-$OPTARG\`\r\n"
          $(insthelp help $cmd)
          exit 2 ;;
        :)
          printf >&2 "Missing argument for \`-$OPTARG\`\r\n"
          $(insthelp help $cmd)
          exit 2 ;;
      esac
    done
    shift $((OPTIND-1))
    if [ $# -gt 0 ] && ! [[ "$1" =~ ^- ]]; then
      path="$1"
      shift
      break
    else
      printf >&2 "No API method provided\r\n"
      $(insthelp help $cmd)
      exit 2
    fi
  done
  if [ "$1" == "--" ]; then
    shift
    path=("${path[@]}" "$@")
  fi
fi

# BUILD COMMAND ################################################################
# ##############################################################################
if [ -z "$studio_domain" ] && [ -z "$studio_email" ] && [ -z "$studio_password" ]; then
  $(insthelp readconfig $cmd)
elif [ -z "$studio_domain" ] || [ -z "$studio_email" ] || [ -z "$studio_password" ]; then
  printf >&2 "\`-d\`, \`-e\`, and \`-p\` are required when not using a config file\r\n"
  $(insthelp help $cmd)
  exit 2
fi

if [ -n "$outputpath" ] && [ -n "$outputrenderer" ]; then
  outputrenderer=""
fi

# START SESSION ################################################################
# ##############################################################################
session=$(curl $curlopts -H "Content-Type: application/json" --data '{"email":"'$studio_email'","password":"'$studio_password'"}' -X POST "https://$studio_domain.instructuremedia.com/api/auth/session")
if [ $? -gt 0 ]; then
  printf >&2 "Unable to generate a session.  Please ensure that your credentials are accurate.\r\n"
  exit 2
fi
token=$(echo "$session" | python -c 'import sys, json; print json.load(sys.stdin)["session"]["token"]')
if [ $? -gt 0 ]; then
  printf >&2 "Unable to find session token.\r\n"
  exit 2
fi
userid=$(echo "$session" | python -c 'import sys, json; print json.load(sys.stdin)["session"]["user"]["id"]')
if [ $? -gt 0 ]; then
  printf >&2 "Unable to find session userid.\r\n"
  exit 2
fi

# BUILD COMMAND ################################################################
# ##############################################################################
command="curl $curlopts -H 'Authorization: Bearer user_id=\"$userid\", token=\"$token\"' -X $httpmethod \"https://$studio_domain.instructuremedia.com/api/$path\" $formopts $outputrenderer $outputpath"
if [ "$sample" = true ]; then
  printf >&2 "$command\r\n"
else
  eval $command
fi

# DELETE SESSION ###############################################################
# ##############################################################################
closesession="curl $curlopts 'Authorization: Bearer user_id=\"$userid\", token=\"$token\"' -X DELETE https://$arc_domain.instructuremedia.com/api/auth/session"
eval $closesession
