#!/bin/bash

# LICENSE ######################################################################
# ##############################################################################
#
# Copyright 2017 Danny Wahl (danny@instructure.com)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# HELPER FUNCTIONS #############################################################
# ##############################################################################
cmd=${0##*/}
ver="1.0.0"
$(insthelp checkdeps) > /dev/null 2>&1
curlopts=$(insthelp curlopts)
outputrenderer=$(insthelp setrenderer)
httpmethod=$(insthelp sethttp)

# PREF FILE ####################################################################
# ##############################################################################
if [ -f ~/.inst ]; then
  . ~/.inst
  if [ -z $catalog_domain ] || [ -z $catalog_token ]; then
   $(insthelp setconfig $cmd)
   exit
  fi
else
 $(insthelp setconfig $cmd)
 exit
fi

# PAGINATION ###################################################################
# ##############################################################################
query=$(insthelp setquery)
pageint=1
page="${query}page=${pageint}"

nextpage() {
  pageint=$((pageint+1))
  setpage $pageint
}

setpage() {
  local n=$1
  page="${query}page=${n}"
}

setpage $pageint
query=$(insthelp setquery $page$perpage)
perpage="${query}per_page=10"

setcount() {
  local n=$1
  if [ $n -gt 100 ]; then
    perpage=100
  else
    perpage=$n
  fi
  perpage="${query}per_page=${perpage}"
}

getpages() {
  local command=$1
  shopt -s extglob
  while IFS=':' read key value; do
      value=${value##+([[:space:]])}; value=${value%%+([[:space:]])}
      case "$key" in
          Link) link="$value";;
       esac
  done < <(eval $command)
  IFS=',' read -r -a link <<< "$link"
  for index in "${!link[@]}"
  do
    if [[ ${link[index]} == *"last"* ]]; then
      link=${link[index]}
      break
    fi
  done
  link=${link##*\?}
  for val in ${link//&/ };do
    key=( ${val/=/ } )
    k=${key[0]}
    if [ $k == 'page' ]; then
      pagecount=${key[1]}
    fi
  done
}

# PARSE OPTS ###################################################################
# ##############################################################################
formopts=""
if [ $# -eq 0 ] && [ ! -f ~/.inst ]; then
  $(insthelp readconfig $cmd)
  $(insthelp help $cmd)
  exit 2
elif [ $# -eq 0 ] && [ -f ~/.inst ]; then
  $(insthelp help $cmd)
  exit 2
else
  while [ $# -gt 0 ] && [ "$1" != "--" ]; do
    while getopts ":hlvcasr:x:X:t:d:o:p:q:f:F:" opt; do
      case $opt in
        h)
          $(insthelp verbosehelp $cmd)
          exit ;;
        l)
          $(insthelp license)
          exit ;;
        v)
          $(insthelp version $cmd $ver)
          exit ;;
        c)
          $(insthelp setconfig $cmd)
          exit ;;
        r)
          outputrenderer=$(insthelp setrenderer $OPTARG) ;;
        X|x)
          $(insthelp sethttp $OPTARG) ;;
        d)
          catalog_domain="$OPTARG" ;;
        t)
          catalog_token="$OPTARG" ;;
        o)
          outputpath=$(insthelp setoutput $OPTARG ${BASH_ARGV[0]})
          if [ "$outputpath" = "ERR" ]; then exit 1; fi ;;
        a)
          getpages=true ;;
        s)
          sample=true ;;
        q)
          setcount $OPTARG ;;
        p)
          pageint="$OPTARG" ;;
        F|f)
          formopts="$formopts -F $OPTARG" ;;
        \?)
          printf >&2 "Invalid option: \`-$OPTARG\`\r\n"
          $(insthelp help $cmd)
          exit 2 ;;
        :)
          printf >&2 "Missing argument for \`-$OPTARG\`\r\n"
          $(insthelp help $cmd)
          exit 2 ;;
      esac
    done
    shift $((OPTIND-1))
    if [ $# -gt 0 ] && ! [[ "$1" =~ ^- ]]; then
      path="$1"
      shift
      break
    else
      printf >&2 "No API method provided\r\n"
      $(insthelp help $cmd)
      exit 2
    fi
  done
  if [ "$1" == "--" ]; then
    shift
    path=("${path[@]}" "$@")
  fi
fi

# BUILD COMMAND ################################################################
# ##############################################################################
if [ -z "$catalog_domain" ] && [ -z "$catalog_token" ]; then
  $(insthelp readconfig $cmd)
elif [ $catalog_domain = "beta" ]; then
  sd=$catalog_domain
  $(insthelp readconfig $cmd)
  canvas_domain="$catalog_domain.$sd"
elif [ -z "$catalog_domain" ] || [ -z "$catalog_domain" ]; then
  printf >&2 "Both \`-d\` and \`-t\` are requied when not using a config file\r\n"
  $(insthelp help $cmd)
  exit 2
fi

if [ -n "$outputpath" ] && [ -n "$outputrenderer" ]; then
  outputrenderer=""
fi

pagecount=1
if [ "$getpages" = true ] && [ "$httpmethod" == "GET" ]; then
  command="curl $curlopts -I -X $httpmethod \"https://$catalog_domain.catalog.instructure.com/api/v1/$path$page$perpage\""
  getpages "$command"
fi

if [ $httpmethod != "GET" ]; then
  perpage=""
  page=""
  pagecount=1
fi

while
  command="curl $curlopts -X $httpmethod \"https://$catalog_domain.catalog.instructure.com/api/v1/$path$page$perpage\" $formopts $outputrenderer $outputpath"
  if [ "$sample" = true ]; then
    printf >&2 "$command\r\n"
  else
    eval $command
  fi
  (( $pageint < $pagecount ))
do
  nextpage
  continue
done
